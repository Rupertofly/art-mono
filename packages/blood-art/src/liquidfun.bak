/* eslint-disable @typescript-eslint/naming-convention */
/* eslint-disable @typescript-eslint/member-ordering */
/** Declaration file generated by dts-gen */

declare global {
	class b2AABB {
		constructor();

		GetCenter(): void;
	}

	class b2Body {
		constructor(ptr: any);

		ApplyAngularImpulse(force: any, wake: any): void;

		ApplyForce(force: any, point: any, wake: any): void;

		ApplyForceToCenter(force: any, wake: any): void;

		ApplyTorque(force: any, wake: any): void;

		CreateFixtureFromDef(fixtureDef: any): any;

		CreateFixtureFromShape(shape: any, density: any): any;

		DestroyFixture(fixture: any): void;

		GetAngle(): any;

		GetAngularVelocity(): any;

		GetInertia(): any;

		GetLinearVelocity(): any;

		GetLocalPoint(vec: any): any;

		GetLocalVector(vec: any): any;

		GetMass(): any;

		GetPosition(): any;

		GetTransform(): any;

		GetType(): any;

		GetUserData(): any;

		GetWorldCenter(): any;

		GetWorldPoint(vec: any): any;

		GetWorldVector(vec: any): any;

		SetAngularVelocity(angle: any): void;

		SetAwake(flag: any): void;

		SetLinearVelocity(v: any): void;

		SetMassData(massData: any): void;

		SetTransform(v: any, angle: any): void;

		SetType(type: any): void;
	}

	class b2ChainShape {
		constructor();
		vertices: b2Vec2[];
		type: any;
		CreateLoop(): void;
	}

	class b2CircleShape {
		m_p: b2Vec2;
		constructor();
	}

	class b2Contact {
		constructor(ptr: any);

		GetFixtureA(): any;

		GetFixtureB(): any;

		GetManifold(): any;

		GetWorldManifold(): any;

		SetTangentSpeed(speed: any): void;
	}

	class b2ContactImpulse {
		constructor(ptr: any);

		GetCount(i: any): void;

		GetNormalImpulse(i: any): any;

		GetTangentImpulse(i: any): any;
	}

	class b2DistanceJointDef {
		constructor();

		Create(world: any): any;

		InitializeAndCreate(
			bodyA: any,
			bodyB: any,
			anchorA: any,
			anchorB: any,
		): any;
	}

	class b2EdgeShape {
		constructor();

		Set(v1: any, v2: any): void;
	}

	class b2Fixture {
		constructor();

		FromFixtureDef(fixtureDef: any): void;

		GetUserData(): any;

		SetSensor(flag: any): void;

		TestPoint(p: any): any;
	}

	class b2FrictionJointDef {
		constructor();

		Create(world: any): any;

		InitializeAndCreate(bodyA: any, bodyB: any, anchor: any): any;
	}

	class b2GearJoint {
		constructor(def: any);

		GetRatio(): any;
	}

	class b2GearJointDef {
		constructor();

		Create(world: any): any;
	}

	class b2Joint {
		constructor();

		GetBodyA(): any;

		GetBodyB(): any;
	}

	class b2Manifold {
		constructor(ptr: any);

		GetPointCount(): any;
	}

	class b2MotorJoint {
		constructor(def: any);

		SetAngularOffset(angle: any): void;

		SetLinearOffset(v: any): void;
	}

	class b2MotorJointDef {
		constructor();

		Create(world: any): any;

		InitializeAndCreate(bodyA: any, bodyB: any): any;
	}

	class b2MouseJoint {
		constructor(def: any);

		SetTarget(p: any): void;
	}

	class b2MouseJointDef {
		constructor();

		Create(world: any): any;
	}

	class b2ParticleColor {
		constructor(r: any, g: any, b: any, a: any);

		Set(r: any, g: any, b: any, a: any): void;
	}

	class b2ParticleGroup {
		constructor(ptr: any);

		ApplyForce(force: any): void;

		ApplyLinearImpulse(impulse: any): void;

		DestroyParticles(flag: any): void;

		GetBufferIndex(): any;

		GetGroupFlags(): any;

		GetParticleCount(): any;

		SetGroupFlags(flags: any): void;
	}

	class b2ParticleSystem {
		constructor(ptr: any);

		CreateParticle(pd: b2ParticleDef): any;

		CreateParticleGroup(pgd: b2ParticleGroupDef): any;

		DestroyParticlesInShape(shape: any, xf: any): any;

		GetColorBuffer(): any;

		GetParticleCount(): any;

		GetPositionBuffer(): any;

		GetVelocityBuffer(): any;

		SetDamping(damping: any): void;

		SetDensity(density: any): void;

		SetRadius(radius: any): void;
	}

	class b2PolygonShape {
		constructor();

		SetAsBoxXY(hx: any, hy: any): void;

		SetAsBoxXYCenterAngle(hx: any, hy: any, center: any, angle: any): void;

		Validate(): any;
	}

	class b2PrismaticJoint {
		constructor(def: any);

		EnableLimit(flag: any): any;

		EnableMotor(flag: any): any;

		GetJointTranslation(): any;

		GetMotorEnabled(): any;

		GetMotorForce(hz: any): any;

		GetMotorSpeed(): any;

		IsLimitEnabled(): any;

		IsMotorEnabled(): any;

		SetMotorSpeed(speed: any): any;
	}

	class b2PrismaticJointDef {
		constructor();

		Create(world: any): any;

		InitializeAndCreate(bodyA: any, bodyB: any, anchor: any, axis: any): any;
	}

	class b2PulleyJointDef {
		constructor();

		Create(world: any): any;

		InitializeAndCreate(
			bodyA: any,
			bodyB: any,
			groundAnchorA: any,
			groundAnchorB: any,
			anchorA: any,
			anchorB: any,
			ratio: any,
		): any;
	}

	class b2RevoluteJoint {
		constructor(revoluteJointDef: any);

		EnableLimit(flag: any): void;

		EnableMotor(flag: any): void;

		GetJointAngle(flag: any): any;

		IsLimitEnabled(): any;

		IsMotorEnabled(): any;

		SetMotorSpeed(speed: any): void;
	}

	class b2RevoluteJointDef {
		constructor();

		Create(world: any): any;

		InitializeAndCreate(bodyA: any, bodyB: any, anchor: any): any;
	}

	class b2RopeJointDef {
		constructor();

		Create(world: any): any;
	}

	class b2Rot {
		constructor(radians: any);

		GetXAxis(): any;

		Set(radians: any): void;

		SetIdentity(): void;
	}

	class b2Transform {
		constructor(position: any, rotation: any);

		FromFloat64Array(array: any): void;

		SetIdentity(): void;
	}

	class b2Vec2 {
		constructor(x: any, y: any);

		Clone(): any;

		Length(): any;

		LengthSquared(): any;

		Set(x: any, y: any): void;

		static Add(out: any, a: any, b: any): void;

		static Cross(a: any, b: any): any;

		static CrossScalar(output: any, input: any, scalar: any): void;

		static Mul(out: any, T: any, v: any): void;

		static MulScalar(out: any, input: any, scalar: any): void;

		static Normalize(out: any, input: any): void;

		static Sub(out: any, input: any, subtract: any): void;
	}

	class b2WeldJointDef {
		constructor();

		Create(world: any): any;

		InitializeAndCreate(bodyA: any, bodyB: any, anchor: any): any;
	}

	class b2WheelJoint {
		constructor(def: any);

		SetMotorSpeed(speed: any): void;

		SetSpringFrequencyHz(hz: any): void;
	}

	class b2WheelJointDef {
		constructor();

		Create(world: any): any;

		InitializeAndCreate(bodyA: any, bodyB: any, anchor: any, axis: any): any;
	}

	class b2World {
		constructor(gravity: any);

		CreateBody(bodyDef: any): b2Body;

		CreateJoint(jointDef: any): any;

		CreateParticleSystem(psd: any): any;

		DestroyBody(body: any): void;

		DestroyJoint(joint: any): void;

		DestroyParticleSystem(particleSystem: any): void;

		QueryAABB(callback: any, aabb: any): void;

		RayCast(callback: any, point1: any, point2: any): void;

		SetContactListener(listener: any): void;

		SetGravity(gravity: any): void;

		Step(steps: any, vIterations: any, pIterations: any): void;

		static BeginContactBody(contactPtr: any): void;

		static EndContactBody(contactPtr: any): void;

		static PostSolve(contactPtr: any, impulsePtr: any): void;

		static PreSolve(contactPtr: any, oldManifoldPtr: any): void;

		static QueryAABB(fixturePtr: any): any;

		static RayCast(
			fixturePtr: any,
			pointX: any,
			pointY: any,
			normalX: any,
			normalY: any,
			fraction: any,
		): any;
	}

	class b2WorldManifold {
		constructor(ptr: any);

		GetPoint(i: any): any;
	}

	const b2_barrierParticle: number;

	const b2_colorMixingParticle: number;

	const b2_destructionListenerParticle: number;

	const b2_dynamicBody: number;

	const b2_elasticParticle: number;

	const b2_fixtureContactFilterParticle: number;

	const b2_fixtureContactListenerParticle: number;

	const b2_kinematicBody: number;

	const b2_linearSlop: number;

	const b2_maxPolygonVertices: number;

	const b2_particleContactFilterParticle: number;

	const b2_particleContactListenerParticle: number;

	const b2_particleGroupCanBeEmpty: number;

	const b2_particleGroupInternalMask: number;

	const b2_particleGroupNeedsUpdateDepth: number;

	const b2_particleGroupWillBeDestroyed: number;

	const b2_polygonRadius: number;

	const b2_powderParticle: number;

	const b2_reactiveParticle: number;

	const b2_repulsiveParticle: number;

	const b2_rigidParticleGroup: number;

	const b2_solidParticleGroup: number;

	const b2_springParticle: number;

	const b2_staticBody: number;

	const b2_staticPressureParticle: number;

	const b2_tensileParticle: number;

	const b2_viscousParticle: number;

	const b2_wallParticle: number;

	const b2_waterParticle: number;

	const b2_zombieParticle: number;

	type b2BodyDef = {
		type: 0 | 1 | 2;
		position: b2Vec2;
		angularVelocity: number;
		linearVelocity: b2Vec2;
		linearDamping: number;
		angularDamping: number;
		allowSleep: number;
		awake: boolean;
		fixedRotation: boolean;
		bullet: boolean;
		active: boolean;
		userData: any;
		gravityScale: number;
	};

	function b2BodyDef(): b2BodyDef;

	function b2Clamp(a: any, low: any, high: any): any;

	function b2DistanceJoint(def: any): void;

	function b2Filter(): void;

	function b2FixtureDef(): void;

	function b2FrictionJoint(def: any): void;

	function b2MassData(mass: any, center: any, I: any): void;

	function b2Max(a: any, b: any): any;

	function b2Min(a: any, b: any): any;

	type b2ParticleDef = {
		flags: number;
		position: b2Vec2;
		velocity: b2Vec2;
		color: b2ParticleColor;
		lifetime: number;
		useData: any;
		group: b2ParticleGroup;
	};

	function b2ParticleDef(): b2ParticleDef;

	type b2ParticleGroupDef = {
		flags: number;
		groupFlags: number;
		position: b2Vec2;
		angle: number;
		linearVelocity: b2Vec2;
		angularVelocity: number;
		color: b2ParticleColor;
		strength: number;
		shape: any;
		shapes: any;
		shapeCount: number;
		stride: number;
		particleCount: number;
		positionData: b2Vec2[];
		lifetime: number;
		userData: any;
		group: b2ParticleGroup;
	};

	function b2ParticleGroupDef(): b2ParticleGroupDef;

	type b2ParticleSystemDef = {
		strictContactCheck: boolean;
		density: number;
		gravityScale: number;
		radius: number;
		maxCount: number;
		pressureStrength: number;
		dampingStrength: number;
		elasticStrength: number;
		springStrength: number;
		viscousStrength: number;
		surfaceTensionPressureStrength: number;
		surfaceTensionNormalStrength: number;
		repulsiveStrength: number;
		powderStrength: number;
		ejectionStrength: number;
		staticPressureStrength: number;
		staticPressureRelaxation: number;
		staticPressureIterations: number;
		colorMixingStrength: number;
		destroyByAge: boolean;
		lifetimeGranularity: number;
	};
	function b2ParticleSystemDef(): b2ParticleSystemDef;

	function b2PulleyJoint(def: any): void;

	function b2RopeJoint(def: any): void;

	function b2WeldJoint(def: any): void;
}
export {};
